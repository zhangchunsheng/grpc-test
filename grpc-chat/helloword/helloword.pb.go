// Code generated by protoc-gen-go. DO NOT EDIT.
// source: helloword.proto

/*
Package helloword is a generated protocol buffer package.

It is generated from these files:
	helloword.proto

It has these top-level messages:
	LoginRequest
	LoginReply
	HelloRequest
	HelloReply
*/
package helloword

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HelloReply_MessageType int32

const (
	HelloReply_CONNECT_SUCCESS HelloReply_MessageType = 0
	HelloReply_CONNECT_FAILED  HelloReply_MessageType = 1
	HelloReply_NORMAL_MESSAGE  HelloReply_MessageType = 2
)

var HelloReply_MessageType_name = map[int32]string{
	0: "CONNECT_SUCCESS",
	1: "CONNECT_FAILED",
	2: "NORMAL_MESSAGE",
}
var HelloReply_MessageType_value = map[string]int32{
	"CONNECT_SUCCESS": 0,
	"CONNECT_FAILED":  1,
	"NORMAL_MESSAGE":  2,
}

func (x HelloReply_MessageType) String() string {
	return proto.EnumName(HelloReply_MessageType_name, int32(x))
}
func (HelloReply_MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type LoginRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type LoginReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Token   string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
}

func (m *LoginReply) Reset()                    { *m = LoginReply{} }
func (m *LoginReply) String() string            { return proto.CompactTextString(m) }
func (*LoginReply) ProtoMessage()               {}
func (*LoginReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoginReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *LoginReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *LoginReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type HelloRequest struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HelloRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type HelloReply struct {
	Message     string                     `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	TS          *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=TS" json:"TS,omitempty"`
	MessageType HelloReply_MessageType     `protobuf:"varint,3,opt,name=message_type,json=messageType,enum=helloword.HelloReply_MessageType" json:"message_type,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *HelloReply) GetTS() *google_protobuf.Timestamp {
	if m != nil {
		return m.TS
	}
	return nil
}

func (m *HelloReply) GetMessageType() HelloReply_MessageType {
	if m != nil {
		return m.MessageType
	}
	return HelloReply_CONNECT_SUCCESS
}

func init() {
	proto.RegisterType((*LoginRequest)(nil), "helloword.LoginRequest")
	proto.RegisterType((*LoginReply)(nil), "helloword.LoginReply")
	proto.RegisterType((*HelloRequest)(nil), "helloword.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "helloword.HelloReply")
	proto.RegisterEnum("helloword.HelloReply_MessageType", HelloReply_MessageType_name, HelloReply_MessageType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Greeter service

type GreeterClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	SayHello(ctx context.Context, opts ...grpc.CallOption) (Greeter_SayHelloClient, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/helloword.Greeter/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SayHello(ctx context.Context, opts ...grpc.CallOption) (Greeter_SayHelloClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Greeter_serviceDesc.Streams[0], c.cc, "/helloword.Greeter/SayHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterSayHelloClient{stream}
	return x, nil
}

type Greeter_SayHelloClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterSayHelloClient struct {
	grpc.ClientStream
}

func (x *greeterSayHelloClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterSayHelloClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Greeter service

type GreeterServer interface {
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	SayHello(Greeter_SayHelloServer) error
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloword.Greeter/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).SayHello(&greeterSayHelloServer{stream})
}

type Greeter_SayHelloServer interface {
	Send(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeterSayHelloServer struct {
	grpc.ServerStream
}

func (x *greeterSayHelloServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterSayHelloServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloword.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Greeter_Login_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHello",
			Handler:       _Greeter_SayHello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "helloword.proto",
}

func init() { proto.RegisterFile("helloword.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0x4d, 0x6f, 0xaa, 0x40,
	0x14, 0x75, 0x78, 0xf1, 0xa9, 0x57, 0xa3, 0x66, 0xde, 0x7b, 0x79, 0x84, 0x95, 0x65, 0x45, 0x5c,
	0x40, 0x63, 0x57, 0x4d, 0x37, 0x35, 0x48, 0x6d, 0x1b, 0x3f, 0x12, 0x86, 0x76, 0x6b, 0xd0, 0x4e,
	0xd1, 0x14, 0x18, 0xca, 0x0c, 0x69, 0xf8, 0x03, 0xfd, 0xa5, 0xfd, 0x21, 0x0d, 0x28, 0x82, 0x69,
	0xda, 0xdd, 0x9c, 0x7b, 0xcf, 0xb9, 0xf7, 0xdc, 0x33, 0xd0, 0xdb, 0x52, 0xdf, 0x67, 0x6f, 0x2c,
	0x7e, 0xd2, 0xa3, 0x98, 0x09, 0x86, 0x5b, 0xc7, 0x82, 0x72, 0xe5, 0xed, 0xc4, 0x36, 0x59, 0xeb,
	0x1b, 0x16, 0x18, 0x1e, 0xf3, 0xdd, 0xd0, 0x33, 0x72, 0xce, 0x3a, 0x79, 0x36, 0x22, 0x91, 0x46,
	0x94, 0x1b, 0x62, 0x17, 0x50, 0x2e, 0xdc, 0x20, 0x2a, 0x5f, 0xfb, 0x39, 0xea, 0x10, 0x3a, 0x33,
	0xe6, 0xed, 0x42, 0x9b, 0xbe, 0x26, 0x94, 0x0b, 0xac, 0x40, 0x33, 0xe1, 0x34, 0x0e, 0xdd, 0x80,
	0xca, 0x68, 0x80, 0xb4, 0x96, 0x7d, 0xc4, 0xea, 0x23, 0xc0, 0x81, 0x1b, 0xf9, 0x29, 0x96, 0xa1,
	0x11, 0x50, 0xce, 0x5d, 0xaf, 0x20, 0x16, 0x30, 0xeb, 0xf0, 0x64, 0xb3, 0xa1, 0x9c, 0xcb, 0xd2,
	0x00, 0x69, 0x4d, 0xbb, 0x80, 0xf8, 0x2f, 0xd4, 0x05, 0x7b, 0xa1, 0xa1, 0xfc, 0x2b, 0x57, 0xec,
	0x81, 0xaa, 0x41, 0xe7, 0x36, 0xbb, 0xa6, 0xf0, 0xf0, 0xed, 0x64, 0xf5, 0x03, 0x01, 0x1c, 0xa8,
	0x3f, 0x5b, 0x18, 0x82, 0xe4, 0x90, 0x7c, 0x7b, 0x7b, 0xa4, 0xe8, 0x1e, 0x63, 0x9e, 0x4f, 0xf5,
	0x22, 0x15, 0xdd, 0x29, 0x42, 0xb0, 0x25, 0x87, 0xe0, 0x09, 0x74, 0x0e, 0xb2, 0x55, 0x96, 0x56,
	0xee, 0xad, 0x3b, 0x3a, 0xd3, 0xcb, 0xc8, 0xcb, 0x95, 0xfa, 0x7c, 0xcf, 0x74, 0xd2, 0x88, 0xda,
	0xed, 0xa0, 0x04, 0xea, 0x3d, 0xb4, 0x2b, 0x3d, 0xfc, 0x07, 0x7a, 0xe6, 0x72, 0xb1, 0xb0, 0x4c,
	0x67, 0x45, 0x1e, 0x4c, 0xd3, 0x22, 0xa4, 0x5f, 0xc3, 0x18, 0xba, 0x45, 0xf1, 0x66, 0x7c, 0x37,
	0xb3, 0x26, 0x7d, 0x94, 0xd5, 0x16, 0x4b, 0x7b, 0x3e, 0x9e, 0xad, 0xe6, 0x16, 0x21, 0xe3, 0xa9,
	0xd5, 0x97, 0x46, 0xef, 0x08, 0x1a, 0xd3, 0x98, 0x52, 0x41, 0x63, 0x7c, 0x09, 0xf5, 0x3c, 0x74,
	0xfc, 0xbf, 0x62, 0xa8, 0xfa, 0x65, 0xca, 0xbf, 0xaf, 0x8d, 0xc8, 0x4f, 0xd5, 0x1a, 0xbe, 0x86,
	0x26, 0x71, 0xd3, 0xdc, 0xfc, 0x89, 0xba, 0x1a, 0xf6, 0x89, 0xba, 0xbc, 0x53, 0xad, 0x69, 0xe8,
	0x1c, 0xad, 0x7f, 0xe7, 0x91, 0x5d, 0x7c, 0x06, 0x00, 0x00, 0xff, 0xff, 0x51, 0x16, 0x3b, 0x49,
	0x7f, 0x02, 0x00, 0x00,
}
