<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc.proto

namespace Etcdserverpb;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>etcdserverpb.PutRequest</code>
 */
class PutRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * key is the key, in bytes, to put into the key-value store.
     *
     * Generated from protobuf field <code>bytes key = 1;</code>
     */
    private $key = '';
    /**
     * value is the value, in bytes, to associate with the key in the key-value store.
     *
     * Generated from protobuf field <code>bytes value = 2;</code>
     */
    private $value = '';
    /**
     * lease is the lease ID to associate with the key in the key-value store. A lease
     * value of 0 indicates no lease.
     *
     * Generated from protobuf field <code>int64 lease = 3;</code>
     */
    private $lease = 0;
    /**
     * If prev_kv is set, etcd gets the previous key-value pair before changing it.
     * The previous key-value pair will be returned in the put response.
     *
     * Generated from protobuf field <code>bool prev_kv = 4;</code>
     */
    private $prev_kv = false;
    /**
     * If ignore_value is set, etcd updates the key using its current value.
     * Returns an error if the key does not exist.
     *
     * Generated from protobuf field <code>bool ignore_value = 5;</code>
     */
    private $ignore_value = false;
    /**
     * If ignore_lease is set, etcd updates the key using its current lease.
     * Returns an error if the key does not exist.
     *
     * Generated from protobuf field <code>bool ignore_lease = 6;</code>
     */
    private $ignore_lease = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $key
     *           key is the key, in bytes, to put into the key-value store.
     *     @type string $value
     *           value is the value, in bytes, to associate with the key in the key-value store.
     *     @type int|string $lease
     *           lease is the lease ID to associate with the key in the key-value store. A lease
     *           value of 0 indicates no lease.
     *     @type bool $prev_kv
     *           If prev_kv is set, etcd gets the previous key-value pair before changing it.
     *           The previous key-value pair will be returned in the put response.
     *     @type bool $ignore_value
     *           If ignore_value is set, etcd updates the key using its current value.
     *           Returns an error if the key does not exist.
     *     @type bool $ignore_lease
     *           If ignore_lease is set, etcd updates the key using its current lease.
     *           Returns an error if the key does not exist.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Rpc::initOnce();
        parent::__construct($data);
    }

    /**
     * key is the key, in bytes, to put into the key-value store.
     *
     * Generated from protobuf field <code>bytes key = 1;</code>
     * @return string
     */
    public function getKey()
    {
        return $this->key;
    }

    /**
     * key is the key, in bytes, to put into the key-value store.
     *
     * Generated from protobuf field <code>bytes key = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->key = $var;

        return $this;
    }

    /**
     * value is the value, in bytes, to associate with the key in the key-value store.
     *
     * Generated from protobuf field <code>bytes value = 2;</code>
     * @return string
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * value is the value, in bytes, to associate with the key in the key-value store.
     *
     * Generated from protobuf field <code>bytes value = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setValue($var)
    {
        GPBUtil::checkString($var, False);
        $this->value = $var;

        return $this;
    }

    /**
     * lease is the lease ID to associate with the key in the key-value store. A lease
     * value of 0 indicates no lease.
     *
     * Generated from protobuf field <code>int64 lease = 3;</code>
     * @return int|string
     */
    public function getLease()
    {
        return $this->lease;
    }

    /**
     * lease is the lease ID to associate with the key in the key-value store. A lease
     * value of 0 indicates no lease.
     *
     * Generated from protobuf field <code>int64 lease = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setLease($var)
    {
        GPBUtil::checkInt64($var);
        $this->lease = $var;

        return $this;
    }

    /**
     * If prev_kv is set, etcd gets the previous key-value pair before changing it.
     * The previous key-value pair will be returned in the put response.
     *
     * Generated from protobuf field <code>bool prev_kv = 4;</code>
     * @return bool
     */
    public function getPrevKv()
    {
        return $this->prev_kv;
    }

    /**
     * If prev_kv is set, etcd gets the previous key-value pair before changing it.
     * The previous key-value pair will be returned in the put response.
     *
     * Generated from protobuf field <code>bool prev_kv = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setPrevKv($var)
    {
        GPBUtil::checkBool($var);
        $this->prev_kv = $var;

        return $this;
    }

    /**
     * If ignore_value is set, etcd updates the key using its current value.
     * Returns an error if the key does not exist.
     *
     * Generated from protobuf field <code>bool ignore_value = 5;</code>
     * @return bool
     */
    public function getIgnoreValue()
    {
        return $this->ignore_value;
    }

    /**
     * If ignore_value is set, etcd updates the key using its current value.
     * Returns an error if the key does not exist.
     *
     * Generated from protobuf field <code>bool ignore_value = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setIgnoreValue($var)
    {
        GPBUtil::checkBool($var);
        $this->ignore_value = $var;

        return $this;
    }

    /**
     * If ignore_lease is set, etcd updates the key using its current lease.
     * Returns an error if the key does not exist.
     *
     * Generated from protobuf field <code>bool ignore_lease = 6;</code>
     * @return bool
     */
    public function getIgnoreLease()
    {
        return $this->ignore_lease;
    }

    /**
     * If ignore_lease is set, etcd updates the key using its current lease.
     * Returns an error if the key does not exist.
     *
     * Generated from protobuf field <code>bool ignore_lease = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setIgnoreLease($var)
    {
        GPBUtil::checkBool($var);
        $this->ignore_lease = $var;

        return $this;
    }

}

