<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc.proto

namespace Etcdserverpb;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>etcdserverpb.WatchResponse</code>
 */
class WatchResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>.etcdserverpb.ResponseHeader header = 1;</code>
     */
    private $header = null;
    /**
     * watch_id is the ID of the watcher that corresponds to the response.
     *
     * Generated from protobuf field <code>int64 watch_id = 2;</code>
     */
    private $watch_id = 0;
    /**
     * created is set to true if the response is for a create watch request.
     * The client should record the watch_id and expect to receive events for
     * the created watcher from the same stream.
     * All events sent to the created watcher will attach with the same watch_id.
     *
     * Generated from protobuf field <code>bool created = 3;</code>
     */
    private $created = false;
    /**
     * canceled is set to true if the response is for a cancel watch request.
     * No further events will be sent to the canceled watcher.
     *
     * Generated from protobuf field <code>bool canceled = 4;</code>
     */
    private $canceled = false;
    /**
     * compact_revision is set to the minimum index if a watcher tries to watch
     * at a compacted index.
     * This happens when creating a watcher at a compacted revision or the watcher cannot
     * catch up with the progress of the key-value store.
     * The client should treat the watcher as canceled and should not try to create any
     * watcher with the same start_revision again.
     *
     * Generated from protobuf field <code>int64 compact_revision = 5;</code>
     */
    private $compact_revision = 0;
    /**
     * cancel_reason indicates the reason for canceling the watcher.
     *
     * Generated from protobuf field <code>string cancel_reason = 6;</code>
     */
    private $cancel_reason = '';
    /**
     * framgment is true if large watch response was split over multiple responses.
     *
     * Generated from protobuf field <code>bool fragment = 7;</code>
     */
    private $fragment = false;
    /**
     * Generated from protobuf field <code>repeated .mvccpb.Event events = 11;</code>
     */
    private $events;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Etcdserverpb\ResponseHeader $header
     *     @type int|string $watch_id
     *           watch_id is the ID of the watcher that corresponds to the response.
     *     @type bool $created
     *           created is set to true if the response is for a create watch request.
     *           The client should record the watch_id and expect to receive events for
     *           the created watcher from the same stream.
     *           All events sent to the created watcher will attach with the same watch_id.
     *     @type bool $canceled
     *           canceled is set to true if the response is for a cancel watch request.
     *           No further events will be sent to the canceled watcher.
     *     @type int|string $compact_revision
     *           compact_revision is set to the minimum index if a watcher tries to watch
     *           at a compacted index.
     *           This happens when creating a watcher at a compacted revision or the watcher cannot
     *           catch up with the progress of the key-value store.
     *           The client should treat the watcher as canceled and should not try to create any
     *           watcher with the same start_revision again.
     *     @type string $cancel_reason
     *           cancel_reason indicates the reason for canceling the watcher.
     *     @type bool $fragment
     *           framgment is true if large watch response was split over multiple responses.
     *     @type \Mvccpb\Event[]|\Google\Protobuf\Internal\RepeatedField $events
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Rpc::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.etcdserverpb.ResponseHeader header = 1;</code>
     * @return \Etcdserverpb\ResponseHeader
     */
    public function getHeader()
    {
        return $this->header;
    }

    /**
     * Generated from protobuf field <code>.etcdserverpb.ResponseHeader header = 1;</code>
     * @param \Etcdserverpb\ResponseHeader $var
     * @return $this
     */
    public function setHeader($var)
    {
        GPBUtil::checkMessage($var, \Etcdserverpb\ResponseHeader::class);
        $this->header = $var;

        return $this;
    }

    /**
     * watch_id is the ID of the watcher that corresponds to the response.
     *
     * Generated from protobuf field <code>int64 watch_id = 2;</code>
     * @return int|string
     */
    public function getWatchId()
    {
        return $this->watch_id;
    }

    /**
     * watch_id is the ID of the watcher that corresponds to the response.
     *
     * Generated from protobuf field <code>int64 watch_id = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setWatchId($var)
    {
        GPBUtil::checkInt64($var);
        $this->watch_id = $var;

        return $this;
    }

    /**
     * created is set to true if the response is for a create watch request.
     * The client should record the watch_id and expect to receive events for
     * the created watcher from the same stream.
     * All events sent to the created watcher will attach with the same watch_id.
     *
     * Generated from protobuf field <code>bool created = 3;</code>
     * @return bool
     */
    public function getCreated()
    {
        return $this->created;
    }

    /**
     * created is set to true if the response is for a create watch request.
     * The client should record the watch_id and expect to receive events for
     * the created watcher from the same stream.
     * All events sent to the created watcher will attach with the same watch_id.
     *
     * Generated from protobuf field <code>bool created = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setCreated($var)
    {
        GPBUtil::checkBool($var);
        $this->created = $var;

        return $this;
    }

    /**
     * canceled is set to true if the response is for a cancel watch request.
     * No further events will be sent to the canceled watcher.
     *
     * Generated from protobuf field <code>bool canceled = 4;</code>
     * @return bool
     */
    public function getCanceled()
    {
        return $this->canceled;
    }

    /**
     * canceled is set to true if the response is for a cancel watch request.
     * No further events will be sent to the canceled watcher.
     *
     * Generated from protobuf field <code>bool canceled = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setCanceled($var)
    {
        GPBUtil::checkBool($var);
        $this->canceled = $var;

        return $this;
    }

    /**
     * compact_revision is set to the minimum index if a watcher tries to watch
     * at a compacted index.
     * This happens when creating a watcher at a compacted revision or the watcher cannot
     * catch up with the progress of the key-value store.
     * The client should treat the watcher as canceled and should not try to create any
     * watcher with the same start_revision again.
     *
     * Generated from protobuf field <code>int64 compact_revision = 5;</code>
     * @return int|string
     */
    public function getCompactRevision()
    {
        return $this->compact_revision;
    }

    /**
     * compact_revision is set to the minimum index if a watcher tries to watch
     * at a compacted index.
     * This happens when creating a watcher at a compacted revision or the watcher cannot
     * catch up with the progress of the key-value store.
     * The client should treat the watcher as canceled and should not try to create any
     * watcher with the same start_revision again.
     *
     * Generated from protobuf field <code>int64 compact_revision = 5;</code>
     * @param int|string $var
     * @return $this
     */
    public function setCompactRevision($var)
    {
        GPBUtil::checkInt64($var);
        $this->compact_revision = $var;

        return $this;
    }

    /**
     * cancel_reason indicates the reason for canceling the watcher.
     *
     * Generated from protobuf field <code>string cancel_reason = 6;</code>
     * @return string
     */
    public function getCancelReason()
    {
        return $this->cancel_reason;
    }

    /**
     * cancel_reason indicates the reason for canceling the watcher.
     *
     * Generated from protobuf field <code>string cancel_reason = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setCancelReason($var)
    {
        GPBUtil::checkString($var, True);
        $this->cancel_reason = $var;

        return $this;
    }

    /**
     * framgment is true if large watch response was split over multiple responses.
     *
     * Generated from protobuf field <code>bool fragment = 7;</code>
     * @return bool
     */
    public function getFragment()
    {
        return $this->fragment;
    }

    /**
     * framgment is true if large watch response was split over multiple responses.
     *
     * Generated from protobuf field <code>bool fragment = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setFragment($var)
    {
        GPBUtil::checkBool($var);
        $this->fragment = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>repeated .mvccpb.Event events = 11;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getEvents()
    {
        return $this->events;
    }

    /**
     * Generated from protobuf field <code>repeated .mvccpb.Event events = 11;</code>
     * @param \Mvccpb\Event[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setEvents($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Mvccpb\Event::class);
        $this->events = $arr;

        return $this;
    }

}

