<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: kv.proto

namespace Mvccpb;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>mvccpb.Event</code>
 */
class Event extends \Google\Protobuf\Internal\Message
{
    /**
     * type is the kind of event. If type is a PUT, it indicates
     * new data has been stored to the key. If type is a DELETE,
     * it indicates the key was deleted.
     *
     * Generated from protobuf field <code>.mvccpb.Event.EventType type = 1;</code>
     */
    private $type = 0;
    /**
     * kv holds the KeyValue for the event.
     * A PUT event contains current kv pair.
     * A PUT event with kv.Version=1 indicates the creation of a key.
     * A DELETE/EXPIRE event contains the deleted key with
     * its modification revision set to the revision of deletion.
     *
     * Generated from protobuf field <code>.mvccpb.KeyValue kv = 2;</code>
     */
    private $kv = null;
    /**
     * prev_kv holds the key-value pair before the event happens.
     *
     * Generated from protobuf field <code>.mvccpb.KeyValue prev_kv = 3;</code>
     */
    private $prev_kv = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $type
     *           type is the kind of event. If type is a PUT, it indicates
     *           new data has been stored to the key. If type is a DELETE,
     *           it indicates the key was deleted.
     *     @type \Mvccpb\KeyValue $kv
     *           kv holds the KeyValue for the event.
     *           A PUT event contains current kv pair.
     *           A PUT event with kv.Version=1 indicates the creation of a key.
     *           A DELETE/EXPIRE event contains the deleted key with
     *           its modification revision set to the revision of deletion.
     *     @type \Mvccpb\KeyValue $prev_kv
     *           prev_kv holds the key-value pair before the event happens.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Kv::initOnce();
        parent::__construct($data);
    }

    /**
     * type is the kind of event. If type is a PUT, it indicates
     * new data has been stored to the key. If type is a DELETE,
     * it indicates the key was deleted.
     *
     * Generated from protobuf field <code>.mvccpb.Event.EventType type = 1;</code>
     * @return int
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * type is the kind of event. If type is a PUT, it indicates
     * new data has been stored to the key. If type is a DELETE,
     * it indicates the key was deleted.
     *
     * Generated from protobuf field <code>.mvccpb.Event.EventType type = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkEnum($var, \Mvccpb\Event_EventType::class);
        $this->type = $var;

        return $this;
    }

    /**
     * kv holds the KeyValue for the event.
     * A PUT event contains current kv pair.
     * A PUT event with kv.Version=1 indicates the creation of a key.
     * A DELETE/EXPIRE event contains the deleted key with
     * its modification revision set to the revision of deletion.
     *
     * Generated from protobuf field <code>.mvccpb.KeyValue kv = 2;</code>
     * @return \Mvccpb\KeyValue
     */
    public function getKv()
    {
        return $this->kv;
    }

    /**
     * kv holds the KeyValue for the event.
     * A PUT event contains current kv pair.
     * A PUT event with kv.Version=1 indicates the creation of a key.
     * A DELETE/EXPIRE event contains the deleted key with
     * its modification revision set to the revision of deletion.
     *
     * Generated from protobuf field <code>.mvccpb.KeyValue kv = 2;</code>
     * @param \Mvccpb\KeyValue $var
     * @return $this
     */
    public function setKv($var)
    {
        GPBUtil::checkMessage($var, \Mvccpb\KeyValue::class);
        $this->kv = $var;

        return $this;
    }

    /**
     * prev_kv holds the key-value pair before the event happens.
     *
     * Generated from protobuf field <code>.mvccpb.KeyValue prev_kv = 3;</code>
     * @return \Mvccpb\KeyValue
     */
    public function getPrevKv()
    {
        return $this->prev_kv;
    }

    /**
     * prev_kv holds the key-value pair before the event happens.
     *
     * Generated from protobuf field <code>.mvccpb.KeyValue prev_kv = 3;</code>
     * @param \Mvccpb\KeyValue $var
     * @return $this
     */
    public function setPrevKv($var)
    {
        GPBUtil::checkMessage($var, \Mvccpb\KeyValue::class);
        $this->prev_kv = $var;

        return $this;
    }

}

